{"version":3,"sources":["AppContext.js","Components/Table.js","Views/Split.js","Components/Card.js","Views/Home.js","Views/Error.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","people","setPeople","Provider","value","children","Table","trans","tableList","map","t","name","className","spent","owe","Split","useContext","total","setTotal","desc","setDesc","setTrans","setName","setSpent","setOwe","error","setError","onChange","e","isNaN","target","onClick","preventDefault","sum","i","length","parseInt","validate","newPeople","amount","pre","prePeople","slice","found","j","console","log","push","history","placeholder","size","Card","color","Home","List","p","to","class","Error","Header","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f7153e2.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\n\nexport const AppContext = createContext();\n\nexport const AppProvider = (props) => {\n    const [people, setPeople] = useState([\n    ])\n    return (\n        <AppContext.Provider value={[people, setPeople]}>\n            {props.children}\n        </AppContext.Provider>\n    );\n}\n\n\n","import React from 'react';\nimport '../App.css';\n\nfunction Table({ trans }) {\n    const tableList = trans ? trans.map((t) => {\n        return (\n            <tr>\n                <td>{t.name}</td>\n                <td className=\"Green\">{t.spent}</td>\n                <td className=\"Red\">{t.owe}</td>\n            </tr>\n        )\n    }) : null\n\n    return (\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Spent</th>\n                <th>Owe</th>\n            </tr>\n            {tableList}\n        </table>\n    )\n}\n\nexport default Table;","import React, { useContext, useState } from 'react';\nimport '../App.css';\nimport { AppContext } from '../AppContext'\nimport Table from '../Components/Table'\n\n\n\nfunction Split(props) {\n  const [people, setPeople] = useContext(AppContext);\n  const [total, setTotal] = useState()\n  const [desc, setDesc] = useState()\n  const [trans, setTrans] = useState([]);\n  const [name, setName] = useState();\n  const [spent, setSpent] = useState();\n  const [owe, setOwe] = useState();\n  const [error, setError] = useState();\n\n  const updateTotal = (e) => {\n    if (!isNaN(e.target.value)) {\n      setTotal(e.target.value);\n    }\n    else {\n      setTotal(\"\")\n    }\n  }\n  const updateDesc = (e) => {\n    setDesc(e.target.value);\n  }\n  const updateName = (e) => {\n    setName(e.target.value);\n  }\n  const updateSpent = (e) => {\n    if (!isNaN(e.target.value)) {\n      setSpent(e.target.value);\n    }\n    else {\n      setSpent(\"\")\n    }\n  }\n  const updateOwe = (e) => {\n    if (!isNaN(e.target.value)) {\n      setOwe(e.target.value);\n    }\n    else {\n      setOwe(\"\")\n    }\n  }\n  const updateTrans = (e) => {\n    e.preventDefault();\n    setTrans((pre) => [...pre, { name: name, spent: spent, owe: owe }])\n  }\n\n  const validate = () => {\n    let sum = 0\n    for (let i = 0; i < trans.length; i++) {\n      sum += parseInt(trans[i].spent)\n    }\n    if (sum == total) {\n      return true;\n    }\n    return false;\n  }\n  const updatePeople = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      var newPeople = trans.map((t) => {\n        return ({\n          name: t.name,\n          amount: t.owe - t.spent\n        })\n      })\n      setPeople((pre) => {\n        let prePeople = pre.slice()\n        for (var i = 0; i < newPeople.length; i++) {\n          var found = false;\n          for (var j = 0; j < prePeople.length; j++) {\n            if (prePeople[j]['name'] === newPeople[i]['name']) {\n              console.log(prePeople[i].name)\n              prePeople[j]['amount'] += newPeople[i]['amount']\n              found = true\n            }\n          }\n          if (found === false) {\n            prePeople.push(newPeople[i])\n          }\n        }\n        return ([...prePeople])\n      });\n      props.history.push('/')\n    }\n    else {\n      setError(\"Total does'nt Match\")\n    }\n  }\n\n  \n  return (\n    <div className=\"Split\">\n\n      <div>\n        <p className=\"Error\">{error}</p>\n        <div className=\"\">\n          <div>Total: </div>\n          <input value={total} onChange={updateTotal}></input>\n        </div>\n        <div className=\"\">\n          <div>Description: </div>\n          <input value={desc} onChange={updateDesc}></input>\n        </div>\n        <button className=\"button\" onClick={updatePeople}>Submit</button>\n      </div>\n\n      <div className=\"Spent-List\">\n        <Table trans={trans} ></Table>\n        <div className=\"addPeople\">\n          <input className=\"input\" placeholder=\"Name\" value={name} onChange={updateName} ></input>\n          <input className=\"input\" placeholder=\"Spent\" size=\"4\" value={spent} onChange={updateSpent} ></input>\n          <input className=\"input\" placeholder=\"Owe\" size=\"4\" value={owe} onChange={updateOwe} ></input>\n          <button className=\"input button\" onClick={updateTrans}>add</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Split;\n","import React from 'react'\nimport '../App.css';\nfunction Card({ name, amount,color }) {\n    return (\n        <div className=\"Card\">\n            <div>\n                {name}\n            </div>\n            <div className={color}>\n                ${amount}\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React,{useContext} from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport { AppContext } from '../AppContext'\nimport Card from '../Components/Card'\n\n\nfunction Home() {\n    const [people,setPeople] = useContext(AppContext);\n    const List = people.map((p)=>{\n        return(\n            <Card name={p.name} amount={p.amount} color = {p.amount<0?\"Red\":\"Green\"}></Card>\n        )\n    })\n\n    return (\n        <div className=\"Home\">\n            {List}\n            <Link to=\"/split\">\n                <div class=\"fab\"> + </div>\n            </Link>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\n\nfunction Error() {\n  return (\n    <div className=\"Error\">\n        Error Page not Found\n    </div>\n  );\n}\n\nexport default Error;\n","import React from 'react';\n\n\n\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n        <h1>Split App</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Split from './Views/Split'\nimport Home from './Views/Home'\nimport Error from './Views/Error'\nimport Header from './Components/Header'\nimport { AppProvider } from './AppContext'\n\n\nfunction App() {\n  return (\n    <AppProvider>\n      <Router>\n        <Header></Header>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={Home}></Route>\n            <Route path=\"/split\" component={Split} ></Route>\n            <Route component={Error} ></Route>\n          </Switch>\n        </div>\n      </Router>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}